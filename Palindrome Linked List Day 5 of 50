/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode* prev = NULL;
        ListNode* temp = head;
        while(temp){
            ListNode* nextnode = temp->next;
            temp->next = prev;
            prev = temp ;
            temp = nextnode;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {

        ListNode* slow = head;
        ListNode* fast = head;

        while(fast->next && fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* secondListHead = slow->next;
        slow->next = NULL;
        ListNode* secondListReverseHead = reverse(secondListHead);

        ListNode* temp1 = head;
        ListNode* temp2 = secondListReverseHead;
        while(temp2){
            if(temp1->val !=temp2->val) return false;
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        return true;





        
    }
};
